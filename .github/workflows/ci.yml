name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
      - feat/*
      - 0.*.*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  LicenseChecks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        # TODO: fix errors so that we can run `make dev` instead
        run: |
          # Setup Virtual Environment
          python3 -m venv ./.venv
          source .venv/bin/activate
          
          if [ "${{ matrix.python-version }}" == "3.9" ]; 
            then
              pip install .[dev]
            else
              poetry install --extras dev
          fi

      - name: Check license
        run: |
          source .venv/bin/activate
          .venv/bin/pip install greenlet setuptools
          .venv/bin/liccheck
  Linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        run: |
          # Setup Virtual Environment
          python3 -m venv ./.venv
          source .venv/bin/activate
          if [ "${{ matrix.python-version }}" == "3.9" ]; 
            then
              pip install .[dev]
            else
              make dev          
          fi

      - name: Lint with ruff
        run: |
          source .venv/bin/activate
          make lint

  Typing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        run: |
          # Setup Virtual Environment
          python3 -m venv ./.venv
          source .venv/bin/activate
          if [ "${{ matrix.python-version }}" == "3.9" ]; 
            then
              pip install .[dev,sql,vectordb,manifest,anthropic,huggingface,api,databricks,uv,llama]
            else
              make full          
          fi

      - name: Static analysis with pyright
        run: |
          source .venv/bin/activate
          make type

  Pytests:
    runs-on: LargeBois
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        # TODO: fix errors so that we can run both `make dev` and `make full`
        # dependencies: ['dev', 'full']
        # dependencies: ["full"]
    steps:
      - uses: actions/checkout@v4

      - name: Create .guardrailsrc
        run: |
          echo 'id="SYSTEM TESTING"' > ~/.guardrailsrc
          echo 'enable_metrics=false' >> ~/.guardrailsrc

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        run: |
          # Setup Virtual Environment
          python3 -m venv ./.venv
          source .venv/bin/activate
          
          if [ "${{ matrix.python-version }}" == "3.9" ]; 
            then
              pip install .[dev,sql,vectordb,manifest,anthropic,huggingface,api,databricks,uv,llama]
            else
              make full          
          fi
          
          if [ "${{ matrix.python-version }}" == "3.12" ]; then
            echo "Installing latest langchain-core and langsmith from PyPI"
            pip install "langchain-core>=0.2" "langsmith<0.2.0,>=0.1.75"
          fi

      - name: Run Pytests
        run: |
          source .venv/bin/activate

          echo "langchain-core version:"
          pip show langchain-core
          echo "langsmith version:"
          pip show langsmith

          make test-cov

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  CLI-Compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        typer-version: ["0.16.0", "0.17.0", "0.18.0", "0.19.2"]
        click-version: ["8.1.0", "8.2.0", "8.3.0"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies with specific typer and click versions
        run: |
          # Setup Virtual Environment
          python3 -m venv ./.venv
          source .venv/bin/activate
          
          # Install package with specific typer and click versions
          pip install typer==${{ matrix.typer-version }} click==${{ matrix.click-version }}
          pip install .[dev]

      - name: Test CLI Commands
        run: |
          source .venv/bin/activate
          
          # Test basic CLI help
          guardrails --help
          
          # Test validate command help
          guardrails validate --help
          
          # Test hub command help
          guardrails hub --help
          
          # Test configure command help
          guardrails configure --help
          
          # Test hub list command (end-to-end)
          guardrails hub list
          
          # Create a simple RAIL spec for testing validate command
          cat > test_spec.rail << 'EOF'
          <rail version="0.1">
          <output>
              <string name="answer" description="A simple answer"/>
          </output>
          <prompt>
          Answer the question: What is 2+2?
          </prompt>
          </rail>
          EOF
          
          # Test validate command end-to-end with the RAIL spec
          echo '{"answer": "4"}' | guardrails validate test_spec.rail -
          
          # Clean up
          rm test_spec.rail